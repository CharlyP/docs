[{"_path":"/guide/configuration/nuxt-auth-handler","_dir":"configuration","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"NuxtAuthHandler","description":"Learn how to configure nuxt-auth with the NuxtAuthHandler","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"nuxtauthhandler"},"children":[{"type":"text","value":"NuxtAuthHandler"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After setting up nuxt-auth inside your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-config.ts"}]},{"type":"text","value":" you can begin defining providers and other options inside your NuxtAuthHandler."}]},{"type":"element","tag":"h2","props":{"id":"creating-a-new-nuxtauthhandler"},"children":[{"type":"text","value":"Creating a new NuxtAuthHandler"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In order to create your own "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NuxtAuthHanlder"}]},{"type":"text","value":", create the file "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"~/server/api/auth/[...].ts"}]},{"type":"text","value":". This file will automatically intercept all\nrequests going to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"https://localhost/api/auth"}]},{"type":"text","value":" and inject the authentication api. If you wish you can also use a custom api path, however this change will need to be\nreflected in the "},{"type":"element","tag":"a","props":{"href":"/nuxt-auth/configuration/nuxt-config#basepath"},"children":[{"type":"text","value":"basePath"}]},{"type":"text","value":", which is configured in the "},{"type":"element","tag":"a","props":{"href":"/nuxt-auth/configuration/nuxt-config"},"children":[{"type":"text","value":"nuxt-config.ts"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"configuring-your-nuxtauthhandler"},"children":[{"type":"text","value":"Configuring your NuxtAuthHandler"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NuxtAuthHandler({ ... })"}]},{"type":"text","value":" to configure how the authentication itself behaves:"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { NuxtAuthHandler } from '#auth'\n    \nexport default NuxtAuthHandler({\n    // your authentication configuration here!\n})\n","filename":"Simple NuxtAuthHandler","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { NuxtAuthHandler } from '#auth'\n    \nexport default NuxtAuthHandler({\n    // your authentication configuration here!\n})\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"import CredentialsProvider from 'next-auth/providers/credentials'\nimport GithubProvider from 'next-auth/providers/github'\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // A secret string you define, to ensure correct encryption  \n  secret: 'your-secret-here',  \n  providers: [\n    // @ts-ignore Import is exported on .default during SSR, so we need to call it this way. May be fixed via Vite at some point\n    GithubProvider.default({\n      clientId: 'your-client-id',\n      clientSecret: 'your-client-secret'\n    }),\n    // @ts-ignore Import is exported on .default during SSR, so we need to call it this way. May be fixed via Vite at some point\n    CredentialsProvider.default({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      // You can pass any HTML attribute to the <input> tag through the object.\n      credentials: {\n        username: { label: 'Username', type: 'text', placeholder: '(hint: jsmith)' },\n        password: { label: 'Password', type: 'password', placeholder: '(hint: hunter2)' }\n      },\n      authorize (credentials: any) {\n        // You need to provide your own logic here that takes the credentials\n        // submitted and returns either a object representing a user or value\n        // that is false/null if the credentials are invalid.\n        // NOTE: THE BELOW LOGIC IS NOT SAFE OR PROPER FOR AUTHENTICATION!\n\n        const user = { id: '1', name: 'J Smith', username: 'jsmith', password: 'hunter2' }\n\n        if (credentials?.username === user.username && credentials?.password === user.password) {\n          // Any object returned will be saved in `user` property of the JWT\n          return user\n        } else {\n          // eslint-disable-next-line no-console\n          console.error('Warning: Malicious login attempt registered, bad credentials provided')\n\n          // If you return null then an error will be displayed advising the user to check their details.\n          return null\n\n          // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\n        }\n      }\n    })\n  ]\n})\n","filename":"Full NuxtAuthHandler","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import CredentialsProvider from 'next-auth/providers/credentials'\nimport GithubProvider from 'next-auth/providers/github'\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // A secret string you define, to ensure correct encryption  \n  secret: 'your-secret-here',  \n  providers: [\n    // @ts-ignore Import is exported on .default during SSR, so we need to call it this way. May be fixed via Vite at some point\n    GithubProvider.default({\n      clientId: 'your-client-id',\n      clientSecret: 'your-client-secret'\n    }),\n    // @ts-ignore Import is exported on .default during SSR, so we need to call it this way. May be fixed via Vite at some point\n    CredentialsProvider.default({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      // You can pass any HTML attribute to the <input> tag through the object.\n      credentials: {\n        username: { label: 'Username', type: 'text', placeholder: '(hint: jsmith)' },\n        password: { label: 'Password', type: 'password', placeholder: '(hint: hunter2)' }\n      },\n      authorize (credentials: any) {\n        // You need to provide your own logic here that takes the credentials\n        // submitted and returns either a object representing a user or value\n        // that is false/null if the credentials are invalid.\n        // NOTE: THE BELOW LOGIC IS NOT SAFE OR PROPER FOR AUTHENTICATION!\n\n        const user = { id: '1', name: 'J Smith', username: 'jsmith', password: 'hunter2' }\n\n        if (credentials?.username === user.username && credentials?.password === user.password) {\n          // Any object returned will be saved in `user` property of the JWT\n          return user\n        } else {\n          // eslint-disable-next-line no-console\n          console.error('Warning: Malicious login attempt registered, bad credentials provided')\n\n          // If you return null then an error will be displayed advising the user to check their details.\n          return null\n\n          // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\n        }\n      }\n    })\n  ]\n})\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NuxtAuthHandler"}]},{"type":"text","value":" accepts "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/configuration/options#options","rel":["nofollow"]},"children":[{"type":"text","value":"all options that NextAuth.js accepts for its API initialization"}]},{"type":"text","value":". Use this place to configure authentication providers (oauth-google, credential flow, ...), your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"secret"}]},{"type":"text","value":" (equivalent to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NEXTAUTH_SECRET"}]},{"type":"text","value":" in NextAuth.js), add callbacks for authentication events, configure a custom logger and more. Read the linked "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NextAuth.js"}]},{"type":"text","value":" configuration to figure out how this works and what you can do."}]}]},"toc":false,"_type":"markdown","_id":"content:2.guide:2.configuration:2.nuxt-auth-handler.md","_source":"content","_file":"2.guide/2.configuration/2.nuxt-auth-handler.md","_extension":"md"},{"_path":"/guide/usage","_dir":"guide","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Application side","description":"This module allows you user-data access, signing in, signing out and more via useSession. It also allows you to defined middleware that protects pages.","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"application-side-usage"},"children":[{"type":"text","value":"Application-side usage"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This module allows you user-data access, signing in, signing out and more "},{"type":"element","tag":"a","props":{"href":"#session-access-and-manipulation"},"children":[{"type":"text","value":"via "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]}]},{"type":"text","value":". It also allows you to defined "},{"type":"element","tag":"a","props":{"href":"#middleware"},"children":[{"type":"text","value":"middleware that protects pages"}]},{"type":"text","value":"."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Application-side usage refers to any code like pages, components or composables that are part of the universal server- and client-side rendering of Nuxt, see more in the "},{"type":"element","tag":"a","props":{"href":"#glossary"},"children":[{"type":"text","value":"glossary"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"session-access-and-manipulation"},"children":[{"type":"text","value":"Session access and manipulation"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" composable is your main gateway to accessing and manipulating session-state and data. Here's the main methdos you can use:"}]},{"type":"element","tag":"code","props":{"code":"const {\n  status,\n  data,\n  getCsrfToken,\n  getProviders,\n  getSession,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status, either `unauthenticated`, `loading`, `authenticated`, see https://next-auth.js.org/getting-started/client#signout\nstatus.value\n\n// Session data, either `undefined` (= authentication not attempted), `null` (= user unauthenticated), `loading` (= session loading in progress), see https://next-auth.js.org/getting-started/client#signout\ndata.value\n\n// Get / Reload the current session from the server, pass `{ required: true }` to force a login if no session exists, see https://next-auth.js.org/getting-started/client#getsession\nawait getSession()\n\n// Get the current CSRF token, usually you do not need this function, see https://next-auth.js.org/getting-started/client#signout\nawait getCsrfToken()\n\n// Get the supported providers, e.g., to build your own login page, see https://next-auth.js.org/getting-started/client#getproviders\nawait getProviders()\n\n// Trigger a sign in, see https://next-auth.js.org/getting-started/client#signin\nawait signIn()\n\n// Trigger a sign in with a redirect afterwards, see https://next-auth.js.org/getting-started/client#signin\nawait signIn(undefined, { callbackUrl: '/protected' })\n\n// Trigger a sign in via a specific authentication provider with a redirect afterwards, see https://next-auth.js.org/getting-started/client#signin\nawait signIn('github', { callbackUrl: '/protected' })\n\n// Trigger a sign in with username and password already passed, e.g., from your own custom-made sign-in form\nawait singIn('credentials', { username: 'jsmith', password: 'hunter2' })\n\n// Trigger a sign out, see https://next-auth.js.org/getting-started/client#signout\nawait signOut()\n\n// Trigger a sign out and send the user to the sign out page afterwards\nawait signOut({ calbackUrl: '/signout' })\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"const {\n  status,\n  data,\n  getCsrfToken,\n  getProviders,\n  getSession,\n  signIn,\n  signOut,\n} = await useSession({\n  // Whether a session is required. If it is, a redirect to the signin page will happen if no active session exists\n  required: true\n})\n\n// Session status, either `unauthenticated`, `loading`, `authenticated`, see https://next-auth.js.org/getting-started/client#signout\nstatus.value\n\n// Session data, either `undefined` (= authentication not attempted), `null` (= user unauthenticated), `loading` (= session loading in progress), see https://next-auth.js.org/getting-started/client#signout\ndata.value\n\n// Get / Reload the current session from the server, pass `{ required: true }` to force a login if no session exists, see https://next-auth.js.org/getting-started/client#getsession\nawait getSession()\n\n// Get the current CSRF token, usually you do not need this function, see https://next-auth.js.org/getting-started/client#signout\nawait getCsrfToken()\n\n// Get the supported providers, e.g., to build your own login page, see https://next-auth.js.org/getting-started/client#getproviders\nawait getProviders()\n\n// Trigger a sign in, see https://next-auth.js.org/getting-started/client#signin\nawait signIn()\n\n// Trigger a sign in with a redirect afterwards, see https://next-auth.js.org/getting-started/client#signin\nawait signIn(undefined, { callbackUrl: '/protected' })\n\n// Trigger a sign in via a specific authentication provider with a redirect afterwards, see https://next-auth.js.org/getting-started/client#signin\nawait signIn('github', { callbackUrl: '/protected' })\n\n// Trigger a sign in with username and password already passed, e.g., from your own custom-made sign-in form\nawait singIn('credentials', { username: 'jsmith', password: 'hunter2' })\n\n// Trigger a sign out, see https://next-auth.js.org/getting-started/client#signout\nawait signOut()\n\n// Trigger a sign out and send the user to the sign out page afterwards\nawait signOut({ calbackUrl: '/signout' })\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Session "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"data"}]},{"type":"text","value":" has the following interface:"}]},{"type":"element","tag":"code","props":{"code":"interface DefaultSession {\n  user?: {\n    name?: string | null;\n    email?: string | null;\n    image?: string | null;\n  };\n  expires: ISODateString;\n}\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"interface DefaultSession {\n  user?: {\n    name?: string | null;\n    email?: string | null;\n    image?: string | null;\n  };\n  expires: ISODateString;\n}\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note that this is only set when the use is logged-in and when the provider used to login the user provides the fields."}]},{"type":"element","tag":"h3","props":{"id":"redirects"},"children":[{"type":"text","value":"Redirects"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can also pass the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"callbackUrl"}]},{"type":"text","value":" option to both the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signIn"}]},{"type":"text","value":" and the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signOut"}]},{"type":"text","value":" method. This allows you to redirect a user to a certain pages, after they've completed the action. This can be useful when a user attempts to open a page ("},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/protected"}]},{"type":"text","value":") but has to go through external authentication (e.g., via their google account) first."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use it like:"}]},{"type":"element","tag":"code","props":{"code":"await signIn({ callbackUrl: '/protected' })\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"await signIn({ callbackUrl: '/protected' })\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"to redirect the user to the protected page they wanted to access "},{"type":"element","tag":"em","props":{},"children":[{"type":"text","value":"after"}]},{"type":"text","value":" they've been authenticated."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can do the same for signing out the user:"}]},{"type":"element","tag":"code","props":{"code":"await signOut({ callbackUrl: '/protected' })\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"await signOut({ callbackUrl: '/protected' })\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"E.g., here to redirect the user away from the already loaded, protected, page after signout (else, you will have to handle the redirect yourself)."}]},{"type":"element","tag":"h3","props":{"id":"custom-sign-in-page"},"children":[{"type":"text","value":"Custom sign in page"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To create your custom sign-in page you can use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"signIn"}]},{"type":"text","value":" to directly start a provider-flow once the user selected it, e.g., by clicking on a button on your custom sign-in page. Here is a very simple sign-in page that either directly starts a github-oauth sign in flow or directly signs in the user via the credentials flow:"}]},{"type":"element","tag":"code","props":{"code":"<template>\n  <div>\n    <p>Sign In Options</p>\n    <button @click=\"signIn('github')\">Github</button>\n    <!-- NOTE: Here we hard-coded username and password, on your own page this should probably be connected to two inputs for username + password -->\n    <button @click=\"signIn('credentials', { username: 'test', password: 'hunter2' })\">Username and Password</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst { signIn } = await useSession({ required: false })\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<template>\n  <div>\n    <p>Sign In Options</p>\n    <button @click=\"signIn('github')\">Github</button>\n    <!-- NOTE: Here we hard-coded username and password, on your own page this should probably be connected to two inputs for username + password -->\n    <button @click=\"signIn('credentials', { username: 'test', password: 'hunter2' })\">Username and Password</button>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nconst { signIn } = await useSession({ required: false })\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: In the above example "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"username"}]},{"type":"text","value":" and "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"password"}]},{"type":"text","value":" are hard-coded. In your own custom page, these two fields should probably come from inputs on your page."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"If you want to create a custom sign-in page that dynamically offers sign-in options based on your configured providers, you can call "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"getProviders()"}]},{"type":"text","value":" first and then iterate over the supported providers to generate your sign in page."}]},{"type":"element","tag":"h2","props":{"id":"middleware"},"children":[{"type":"text","value":"Middleware"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"You can use this library to define application middleware. This library supports all of "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/guide/directory-structure/middleware#middleware-directory","rel":["nofollow"]},"children":[{"type":"text","value":"Nuxt's supported middleware approaches"}]},{"type":"text","value":". In all methods shown below we make use of the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"callbackUrl"}]},{"type":"text","value":" parameter to give the best user experience: If the user is not authenticated, they are forced to login, but will be redirected to the same page they wanted to visit after they successfully logged in. Without a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"callbackUrl"}]},{"type":"text","value":" parameter, the user would be directed to the index page "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h3","props":{"id":"global-middleware"},"children":[{"type":"text","value":"Global middleware"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Create a global authentication middleware that ensures that your user is authenticated no matter which page they visit. Create a file in the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"middleware"}]},{"type":"text","value":" directory that has a "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":".global.ts"}]},{"type":"text","value":" suffix."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"It should look like this:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middleware/auth.global.ts\nexport default defineNuxtRouteMiddleware(async (to) => {\n  await useSession({ callbackUrl: to.path })\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middleware/auth.global.ts\nexport default defineNuxtRouteMiddleware(async (to) => {\n  await useSession({ callbackUrl: to.path })\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"That's it! This middleware will fetch a session and if no active session exists for the current user redirect to the login screen. If you want to write custom redirect logic, you could alter the above code to only apply to specific routes."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Here is a global middleware that protects only the routes that start with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"/secret/"}]},{"type":"text","value":":"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middleware/auth.global.ts\nexport default defineNuxtRouteMiddleware(async (to) => {\n  if (to.path.startsWith('/secret/')) {\n    await useSession({ callbackUrl: to.path })\n  }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middleware/auth.global.ts\nexport default defineNuxtRouteMiddleware(async (to) => {\n  if (to.path.startsWith('/secret/')) {\n    await useSession({ callbackUrl: to.path })\n  }\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Example of a middleware that redirects to a custom login page:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middleware/auth.global.ts\nexport default defineNuxtRouteMiddleware(async (to) => {\n  // 1. Always allow access to the login page\n  if (to.path === '/login') {\n    return\n  }\n\n  // 2. Otherwise: Check status and redirect to login page\n  const { status } = await useSession({ required: false })\n  if (status.value !== 'authenticated') {\n    navigateTo('/login')\n  }\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middleware/auth.global.ts\nexport default defineNuxtRouteMiddleware(async (to) => {\n  // 1. Always allow access to the login page\n  if (to.path === '/login') {\n    return\n  }\n\n  // 2. Otherwise: Check status and redirect to login page\n  const { status } = await useSession({ required: false })\n  if (status.value !== 'authenticated') {\n    navigateTo('/login')\n  }\n})\n"}]}]}]},{"type":"element","tag":"h3","props":{"id":"named-middleware"},"children":[{"type":"text","value":"Named middleware"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Named middleware behave similar to "},{"type":"element","tag":"a","props":{"href":"#global-middleware"},"children":[{"type":"text","value":"global middleware"}]},{"type":"text","value":" but are not automatically applied to any pages."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To use them, first create a middleware:"}]},{"type":"element","tag":"code","props":{"code":"// file: ~/middleware/auth.ts\nexport default defineNuxtRouteMiddleware(async (to) => {\n  await useSession({ callbackUrl: to.path })\n})\n","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"// file: ~/middleware/auth.ts\nexport default defineNuxtRouteMiddleware(async (to) => {\n  await useSession({ callbackUrl: to.path })\n})\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Then inside your pages use the middleware with "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":":"}]},{"type":"element","tag":"code","props":{"code":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: ['auth']\n})\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: ['auth']\n})\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" can only be used inside the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pages/"}]},{"type":"text","value":" directory."}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Nuxt now calls the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"auth.ts"}]},{"type":"text","value":" middleware on every visit to this page."}]},{"type":"element","tag":"h3","props":{"id":"inline-middleware"},"children":[{"type":"text","value":"Inline middleware"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"To define a named middleware, you need to use "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" as described "},{"type":"element","tag":"a","props":{"href":"https://v3.nuxtjs.org/api/utils/define-page-meta/","rel":["nofollow"]},"children":[{"type":"text","value":"in the nuxt docs"}]},{"type":"text","value":". Then you can just call "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"useSession"}]},{"type":"text","value":" as in the other middleware. Here's an example that would protect just the page itself:"}]},{"type":"element","tag":"code","props":{"code":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: async () => {\n    await useSession({ callbackUrl: '/protected' })\n  }\n})\n</script>\n","language":"vue"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"<!-- file: ~/pages/protected.vue -->\n<template>\n  <div>I'm a secret!</div>\n</template>\n\n<script setup lang=\"ts\">\ndefinePageMeta({\n  middleware: async () => {\n    await useSession({ callbackUrl: '/protected' })\n  }\n})\n</script>\n"}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Note: "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"definePageMeta"}]},{"type":"text","value":" can only be used inside the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"pages/"}]},{"type":"text","value":" directory"}]}]},"_type":"markdown","_id":"content:2.guide:4.usage:0.index.md","_source":"content","_file":"2.guide/4.usage/0.index.md","_extension":"md"}]