[{"_path":"/guide/configuration","_dir":"guide","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"Glossary","description":"The nuxt-auth module takes care of authentication and sessions.\nThere are some terms we use in this documentation that may not immediately be known to every reader. Here is an explanation for some of them:","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"glossary"},"children":[{"type":"text","value":"Glossary"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The nuxt-auth module takes care of authentication and sessions.\nThere are some terms we use in this documentation that may not immediately be known to every reader. Here is an explanation for some of them:"}]},{"type":"element","tag":"callout","props":{},"children":[{"type":"element","tag":"template","props":{"v-slot:summary":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"authentication"}]}]},{"type":"element","tag":"template","props":{"v-slot:content":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The process of ensuring that somebody is who they claims to be, e.g., via a username and password or by trusting an external authority (e.g., oauth via google, amazon, ...)"}]}]}]},{"type":"element","tag":"callout","props":{"type":"success"},"children":[{"type":"element","tag":"template","props":{"v-slot:summary":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"sessions"}]}]},{"type":"element","tag":"template","props":{"v-slot:content":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Persist the information that you have been authenticated for some duration across different requests. Additional data can be attached to a session, e.g., a username. (Note: If you need only sessions but no authentication, you can check-out nuxt-session)"}]}]}]},{"type":"element","tag":"callout","props":{"type":"warning"},"children":[{"type":"element","tag":"template","props":{"v-slot:summary":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"application / application-side / universal-application"}]}]},{"type":"element","tag":"template","props":{"v-slot:content":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This references all Nuxt code of your app that is universally rendered. In short this means that that code is rendered on the server-side and on the client-side, so all JS in it is executed twice. This is an important distinction, as some things may behave different on the server-side than on the client-side. We use application... to denote something that will be universally rendered"}]}]}]},{"type":"element","tag":"callout","props":{"type":"danger"},"children":[{"type":"element","tag":"template","props":{"v-slot:summary":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"server / server-side"}]}]},{"type":"element","tag":"template","props":{"v-slot:content":""},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"This references all Nuxt code of your app that will run only on your server. For example, all code inside the ~/server directory should only ever run on the server"}]}]}]}]},"_type":"markdown","_id":"content:2.guide:2.configuration:0.index.md","_source":"content","_file":"2.guide/2.configuration/0.index.md","_extension":"md"},{"_path":"/guide/configuration/nuxt-auth-handler","_dir":"configuration","_draft":false,"_partial":false,"_locale":"en","_empty":false,"title":"NuxtAuthHandler","description":"Learn how to configure nuxt-auth with the NuxtAuthHandler","excerpt":{"type":"root","children":[{"type":"element","tag":"h1","props":{"id":"nuxtauthhandler"},"children":[{"type":"text","value":"NuxtAuthHandler"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"After setting up nuxt-auth inside your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"nuxt-config.ts"}]},{"type":"text","value":" you can begin defining providers and other options inside your NuxtAuthHandler."}]},{"type":"element","tag":"h2","props":{"id":"creating-a-new-nuxtauthhandler"},"children":[{"type":"text","value":"Creating a new NuxtAuthHandler"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"In order to create your own "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NuxtAuthHanlder"}]},{"type":"text","value":", create the file "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"~/server/api/auth/[...].ts"}]},{"type":"text","value":". This file will automatically intercept all\nrequests going to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"https://localhost/api/auth"}]},{"type":"text","value":" and inject the authentication api. If you wish you can also use a custom api path, however this change will need to be\nreflected in the "},{"type":"element","tag":"a","props":{"href":"/nuxt-auth/configuration/nuxt-config#basepath"},"children":[{"type":"text","value":"basePath"}]},{"type":"text","value":", which is configured in the "},{"type":"element","tag":"a","props":{"href":"/nuxt-auth/configuration/nuxt-config"},"children":[{"type":"text","value":"nuxt-config.ts"}]},{"type":"text","value":"."}]},{"type":"element","tag":"h2","props":{"id":"configuring-your-nuxtauthhandler"},"children":[{"type":"text","value":"Configuring your NuxtAuthHandler"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Use the "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NuxtAuthHandler({ ... })"}]},{"type":"text","value":" to configure how the authentication itself behaves:"}]},{"type":"element","tag":"code-group","props":{},"children":[{"type":"element","tag":"code","props":{"code":"import { NuxtAuthHandler } from '#auth'\n    \nexport default NuxtAuthHandler({\n    // your authentication configuration here!\n})\n","filename":"Simple NuxtAuthHandler","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import { NuxtAuthHandler } from '#auth'\n    \nexport default NuxtAuthHandler({\n    // your authentication configuration here!\n})\n"}]}]}]},{"type":"element","tag":"code","props":{"code":"import CredentialsProvider from 'next-auth/providers/credentials'\nimport GithubProvider from 'next-auth/providers/github'\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // A secret string you define, to ensure correct encryption  \n  secret: 'your-secret-here',  \n  providers: [\n    // @ts-ignore Import is exported on .default during SSR, so we need to call it this way. May be fixed via Vite at some point\n    GithubProvider.default({\n      clientId: 'your-client-id',\n      clientSecret: 'your-client-secret'\n    }),\n    // @ts-ignore Import is exported on .default during SSR, so we need to call it this way. May be fixed via Vite at some point\n    CredentialsProvider.default({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      // You can pass any HTML attribute to the <input> tag through the object.\n      credentials: {\n        username: { label: 'Username', type: 'text', placeholder: '(hint: jsmith)' },\n        password: { label: 'Password', type: 'password', placeholder: '(hint: hunter2)' }\n      },\n      authorize (credentials: any) {\n        // You need to provide your own logic here that takes the credentials\n        // submitted and returns either a object representing a user or value\n        // that is false/null if the credentials are invalid.\n        // NOTE: THE BELOW LOGIC IS NOT SAFE OR PROPER FOR AUTHENTICATION!\n\n        const user = { id: '1', name: 'J Smith', username: 'jsmith', password: 'hunter2' }\n\n        if (credentials?.username === user.username && credentials?.password === user.password) {\n          // Any object returned will be saved in `user` property of the JWT\n          return user\n        } else {\n          // eslint-disable-next-line no-console\n          console.error('Warning: Malicious login attempt registered, bad credentials provided')\n\n          // If you return null then an error will be displayed advising the user to check their details.\n          return null\n\n          // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\n        }\n      }\n    })\n  ]\n})\n","filename":"Full NuxtAuthHandler","language":"ts"},"children":[{"type":"element","tag":"pre","props":{},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"import CredentialsProvider from 'next-auth/providers/credentials'\nimport GithubProvider from 'next-auth/providers/github'\nimport { NuxtAuthHandler } from '#auth'\n\nexport default NuxtAuthHandler({\n  // A secret string you define, to ensure correct encryption  \n  secret: 'your-secret-here',  \n  providers: [\n    // @ts-ignore Import is exported on .default during SSR, so we need to call it this way. May be fixed via Vite at some point\n    GithubProvider.default({\n      clientId: 'your-client-id',\n      clientSecret: 'your-client-secret'\n    }),\n    // @ts-ignore Import is exported on .default during SSR, so we need to call it this way. May be fixed via Vite at some point\n    CredentialsProvider.default({\n      // The name to display on the sign in form (e.g. 'Sign in with...')\n      name: 'Credentials',\n      // The credentials is used to generate a suitable form on the sign in page.\n      // You can specify whatever fields you are expecting to be submitted.\n      // e.g. domain, username, password, 2FA token, etc.\n      // You can pass any HTML attribute to the <input> tag through the object.\n      credentials: {\n        username: { label: 'Username', type: 'text', placeholder: '(hint: jsmith)' },\n        password: { label: 'Password', type: 'password', placeholder: '(hint: hunter2)' }\n      },\n      authorize (credentials: any) {\n        // You need to provide your own logic here that takes the credentials\n        // submitted and returns either a object representing a user or value\n        // that is false/null if the credentials are invalid.\n        // NOTE: THE BELOW LOGIC IS NOT SAFE OR PROPER FOR AUTHENTICATION!\n\n        const user = { id: '1', name: 'J Smith', username: 'jsmith', password: 'hunter2' }\n\n        if (credentials?.username === user.username && credentials?.password === user.password) {\n          // Any object returned will be saved in `user` property of the JWT\n          return user\n        } else {\n          // eslint-disable-next-line no-console\n          console.error('Warning: Malicious login attempt registered, bad credentials provided')\n\n          // If you return null then an error will be displayed advising the user to check their details.\n          return null\n\n          // You can also Reject this callback with an Error thus the user will be sent to the error page with the error message as a query parameter\n        }\n      }\n    })\n  ]\n})\n"}]}]}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"The "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NuxtAuthHandler"}]},{"type":"text","value":" accepts "},{"type":"element","tag":"a","props":{"href":"https://next-auth.js.org/configuration/options#options","rel":["nofollow"]},"children":[{"type":"text","value":"all options that NextAuth.js accepts for its API initialization"}]},{"type":"text","value":". Use this place to configure authentication providers (oauth-google, credential flow, ...), your "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"secret"}]},{"type":"text","value":" (equivalent to "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NEXTAUTH_SECRET"}]},{"type":"text","value":" in NextAuth.js), add callbacks for authentication events, configure a custom logger and more. Read the linked "},{"type":"element","tag":"code-inline","props":{},"children":[{"type":"text","value":"NextAuth.js"}]},{"type":"text","value":" configuration to figure out how this works and what you can do."}]}]},"toc":false,"_type":"markdown","_id":"content:2.guide:2.configuration:2.nuxt-auth-handler.md","_source":"content","_file":"2.guide/2.configuration/2.nuxt-auth-handler.md","_extension":"md"}]